/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Userinterface.Tutor;

import Business.Appointment.StudyRoom;
import Business.Enterprise.LibraryEnterprise;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentRequest;
import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cyyo
 */
public class ViewRequestJPanel extends javax.swing.JPanel {
    private JPanel container;
    private UserAccount account;
    private LibraryEnterprise enterprise;
    private DateFormat df;
    /**
     * Creates new form ViewAppointmentJPanel
     */
    public ViewRequestJPanel(JPanel container, UserAccount account, LibraryEnterprise enterprise) {
        initComponents();
        this.container = container;
        this.account = account;
        this.enterprise = enterprise;
        df = new SimpleDateFormat("yyyy-MM-dd");
        populateRequest();
        populateComboBox();
    }
    
    public void populateRequest(){
        DefaultTableModel model = (DefaultTableModel) requestJTable.getModel();
        
        model.setRowCount(0);
        for (AppointmentRequest appointmentRequest : enterprise.getAppointmentQueue().getAppointmentRequestList()) {
            if(appointmentRequest.getReceiver() == null || appointmentRequest.getReceiver() == account){
                Object[] row = new Object[4];
                row[0] = appointmentRequest;
                row[1] = appointmentRequest.getSender();
                row[2] = appointmentRequest.getAppointment().getStudyRoom();
                row[3] = appointmentRequest.getStatus();
                model.addRow(row);
            }
        }
    }
    
    public void populateComboBox(){
        studyRoomComboBox.removeAll();
        for(StudyRoom studyRoom : enterprise.getStudyRoomDirectory().getStudyRoomList()){
            studyRoomComboBox.addItem(studyRoom);
        }
    }
    
    public boolean checkRoom(AppointmentRequest request, StudyRoom studyRoom){
        boolean avilable = false;
        for(AppointmentRequest appointmentRequest : enterprise.getAppointmentQueue().getAppointmentRequestList())
            if(appointmentRequest.getStatus().equals("Accept") && appointmentRequest.getAppointment().getStudyRoom() == studyRoom && request.getAppointment().getDate().equals(appointmentRequest.getAppointment().getDate()) && request.getAppointment().getSession().equals(appointmentRequest.getAppointment().getSession()))
                avilable = true;
        return avilable;
    }
    
    public boolean checkSchedule(AppointmentRequest request){
        boolean avilable = false;
        for(AppointmentRequest appointmentRequest : account.getAppointmentQueue().getAppointmentRequestList())
            if(appointmentRequest.getStatus().equals("Accept") && request.getAppointment().getDate().equals(appointmentRequest.getAppointment().getDate()) && request.getAppointment().getSession().equals(appointmentRequest.getAppointment().getSession()))
                avilable = true;
        return avilable;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        declineBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        acceptBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        requestJTable = new javax.swing.JTable();
        studyRoomComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        declineBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        declineBtn.setText("Decline");
        declineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                declineBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel1.setText("Please View studentsâ€™ request:");

        acceptBtn.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        acceptBtn.setText("Accept");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        requestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Date", "Sender", "StudyRoom", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(requestJTable);

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel2.setText("Please select the studying room for the appointment");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Business/Images/tutor1.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(declineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(acceptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(studyRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(777, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(93, 93, 93))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(34, 34, 34)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(687, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel1)
                .addGap(40, 40, 40)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(studyRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(declineBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(backBtn))
                        .addGap(41, 41, 41))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(acceptBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(78, 78, 78)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(134, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void declineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_declineBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        if(selectedRow >= 0){
            AppointmentRequest appointmentRequest = (AppointmentRequest) requestJTable.getValueAt(selectedRow, 0);
            if(!appointmentRequest.getStatus().equals("Accept")){
                JOptionPane.showMessageDialog(null, "You cannot decline it.");
            }
            else{
                appointmentRequest.setStatus("Sent");
                 JOptionPane.showMessageDialog(null, "Decline Successful");
                appointmentRequest.getAppointment().setStudyRoom(null);
                appointmentRequest.setReceiver(null);
                populateRequest();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_declineBtnActionPerformed

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = requestJTable.getSelectedRow();
        
        if(selectedRow >= 0){
            AppointmentRequest appointmentRequest = (AppointmentRequest) requestJTable.getValueAt(selectedRow, 0);
            if(!appointmentRequest.getStatus().equals("Sent")){
                JOptionPane.showMessageDialog(null, "You cannot change it.");
            }
            else {
                StudyRoom studyRoom = (StudyRoom) studyRoomComboBox.getSelectedItem();
                if(!checkRoom(appointmentRequest, studyRoom)){
                    if(!checkSchedule(appointmentRequest)){
                        appointmentRequest.setStatus("Accept");
                         JOptionPane.showMessageDialog(null, "Accept Successful");
                        appointmentRequest.getAppointment().setStudyRoom(studyRoom);
                        appointmentRequest.setReceiver(account);
                        populateRequest();
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "You have schedule at that time");
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, "This room has been taken");
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_acceptBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton declineBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable requestJTable;
    private javax.swing.JComboBox studyRoomComboBox;
    // End of variables declaration//GEN-END:variables
}
